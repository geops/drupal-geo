<?php // $Id$

/**
 * @file
 * CCK Field integration for geospatial data.
 */
 
/**
 * Implementation of FAPI hook_elements().
 */
function geo_field_elements() {
  return array(
    'geo_field_wkt' => array(
      '#input' => TRUE,
      '#columns' => array('wkt'),
      '#delta' => 0,
      '#process' => array('geo_field_wkt_process'),
    ),
    'geo_field_latlon' => array(
      '#input' => TRUE,
      '#columns' => array('lat', 'lon', 'wkt'),
      '#delta' => 0,
      '#process' => array('geo_field_latlon_process'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function geo_field_theme() {
  return array(
    'geo_field_latlon' => array(
      'arguments' => array('element' => NULL),
    ),
    'geo_field_wkt' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function geo_field_info() {
  return array(
    'geo' => array(
      'label' => t('Geospatial data'),
      'callbacks' => array(),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function geo_field_settings($op, $field) {
  $field_name = $field['field_name'];
  
  switch ($op) {
    case 'form':
      $form = array();

      // Force 'multiple' in order to guarantee a separate storage table.
      $form['multiple'] = array('#type' => 'value', '#value' => 1);

      // Store the geometry type for this field.
      $form['geo_type'] = array(
        '#type' => 'select',
        '#title' => t('Data type'),
        '#options' => geo('supported_types'),
        '#default_value' => $field['geo_type'],
        '#description' => t('Choose the datatype that best describes the information you are storing.  "Point" is suitable for addresses and other fixed points, but you may also choose "Linestring" for lines or tracks, and "Polygon" for shapes and areas.'),
        '#disabled' => !empty($field['geo_type']),
      );

      if (!isset($field['geo_enabled'])) $field['geo_enabled'] = false;
      $form['geo_enabled'] = array('#type' => 'value', '#value' => $field['geo_enabled']);

      // TODO pick the SRID for this column
      if (!isset($field['srid'])) $field['srid'] = GEO_SRID_DEFAULT;
      $form['srid'] = array('#type' => 'value', '#value' => $field['srid']);

      return $form;

    case 'save':
      return array('srid', 'geo_enabled', 'geo_type');
    
    case 'database columns':
      // Use a well-known-text column for each field.
      // We'll add a geospatial field separately, which will mirror this value.
      $spec = array(
        'wkt' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
          'description' => t('Well-known-text format'),
        ),
        'geo' => array(
          'type' => 'blob', // This column will be replaced in _geo_field_init.
          'geo_type' => $field['geo_type'],
          'not null' => TRUE,
          'description' => t('Geometry field'),
        ),
      );

      // Add lat/lon values for point fields ( or centroid for others ).
      $spec['lat'] = array(
        'type' => 'float',
        'size' => 'big',
        'description' => t('Latitude'),
      );
      $spec['lon'] = array(
        'type' => 'float',
        'size' => 'big',
        'description' => t('Longitude'),
      );

      return $spec;
    
    case 'views data':
      // Start with default views data, as constructed by CCK.
      $data = content_views_field_views_data($field);
      $table = content_views_tablename($field);

      // Copy the wkt item to geo, and add handlers for the geospatial field.
      $wkt = $field['field_name'] .'_wkt';
      $geo = $field['field_name'] .'_geo';
      $dst = $field['field_name'] .'_dst';

      $data[$table][$geo] = $data[$table][$dst] = $data[$table][$wkt];
      unset($data[$table][$wkt]);

      // Set field handler to our own.
      $data[$table][$geo]['field']['field'] = $geo;
      $data[$table][$geo]['field']['handler'] = 'views_handler_field_geo_field';
      $data[$table][$geo]['field']['geo_type'] = $field['geo_type'];

      // Add a field handler for distance.
      $data[$table][$dst]['field']['title'] .= ' - '. t('Distance');
      $data[$table][$dst]['field']['field'] = $geo;
      $data[$table][$dst]['field']['handler'] = 'views_handler_field_geo_distance';
      $data[$table][$dst]['field']['float'] = TRUE;
      $data[$table][$dst]['field']['click sortable'] = TRUE;
      $data[$table][$dst]['filter']['title'] .= ' - '. t('Distance');
      $data[$table][$dst]['filter']['handler'] = 'views_handler_filter_geo_distance';
      $data[$table][$dst]['filter']['field'] = $geo;

      $data[$table][$dst]['sort']['handler'] = 'views_handler_sort_geo_distance';
      $data[$table][$dst]['sort']['field'] = $geo;

      $data[$table][$dst]['field']['geo_type'] = $field['geo_type'];

      // Set filter handler to Geo's built-in geo filters.
      $data[$table][$geo]['filter']['field'] = $geo;
      $data[$table][$geo]['filter']['handler'] = 'views_handler_filter_geo';
      $data[$table][$geo]['filter']['geo_type'] = $field['geo_type'];

      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function geo_field($op, &$node, $field, &$items, $teaser, $page) {
  // Make sure the CCK table has our geo field.
  _geo_field_init($field);

  switch ($op) {

    case 'load':
      $ret = $node->$field['field_name'];
      unset($ret['geo']);
      $column = $field['field_name'] .'_geo';
      $res = db_query("SELECT ". geo('field_select', $column) .", delta
        FROM {". _geo_field_tablename($field) ."} WHERE vid = %d", $node->vid);
      while ($row = db_fetch_array($res)) { 
        foreach ($row as $k => $v) {
          if ($k != 'delta') $ret[$row['delta']][$k] = $v;
        }
      }

      // Identify ourselves on the node level for RSS and other postprocessing.
      $geo_fields = isset($node->geo_fields) ?  $node->geo_fields : array();
      $geo_fields[] = $field['field_name'];
      return array($field['field_name'] => $ret, 'geo_fields' => $geo_fields);

    case 'insert':
    case 'update':
      // We can't get Geom functions past query substitutions, so use our own.
      _geo_field_save($op, $node, $field, $items);

      // Unset the field data to prevent further action.
      unset($node->$field['field_name']);
      $items = array();
      return;

    case 'validate':
      foreach ($items as $k => $item) {
        if ($item['lat'] && $item['lon']) {
          $items[$k]['wkt'] = geo('wkt_from_point', $item['lat'], $item['lon']);
        }

        if(!$item['wkt']) continue;

        if (($error = geo('wkt_validate', $item['wkt'], $field['geo_type'])) !== TRUE) {
          $error_field = $field['field_name'];
          form_set_error($error_field, $error);
        }
      }
      return;

    case 'presave':
      foreach ($items as $k => $item) {
        if ($item['lat'] && $item['lon']) {
          $items[$k]['wkt'] = geo('wkt_from_point', $item['lat'], $item['lon']);
        }
      }
      return;
  }
}

/**
 * Implementation of hook_content_is_empty().
 * It's named after the field type (geo), not the module (geo_data).
 */
function geo_content_is_empty($item, $field) {
  return empty($item['wkt']);
}

/**
 * Save function for Geo fields.  Because the storage function includes some
 * calls to database functions, they include quotes that are escaped by the
 * default query substitutions.  Save the value manually instead.
 */
function _geo_field_save($op, $node, $field, $items) {
  $table = $table  = _geo_field_tablename($field);
  $schema = drupal_get_schema($table);

  db_query("DELETE FROM {". $table ."} WHERE vid = %d", $node->vid);
  foreach ($items as $delta => $item) {
    if (geo_content_is_empty($item, $field)) continue;
    $columns = $values = $holders = array();
    $record = array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'delta' => $delta,
    );
    foreach ($schema['fields'] as $column => $info) {
      $key = str_replace($field['field_name'] .'_', '', $column);
      $columns[] = $column;

      if (substr($column, -4) == '_geo') {
        // No substitution for our geo column and omit the corresponding value.
        $srid = (int) $field['srid'] ? $field['srid'] : GEO_SRID_DEFAULT;
        $holders[] = "GeomFromText('". db_escape_string($item['wkt']) ."', $srid)";
      }
      else {
        $holders[] = db_type_placeholder($info['type']);
        $values[] = isset($record[$column]) ? $record[$column] : $item[$key];
      }
    }

    db_query("INSERT INTO {". $table ."} (". implode(', ', $columns) .') 
      VALUES ('. implode(', ', $holders) .')', $values);
  }
}

/**
 * Implementation of hook_widget_info().
 */
function geo_widget_info() {
  return array(
    'geo_field_wkt' => array(
      'label' => t('Direct Text Entry'),
      'field types' => array_keys(geo_field_info()),
    ),
    'geo_field_latlon' => array(
      'label' => t('Latitude / Longitude'),
      'field types' => array('geo'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function geo_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
}

function geo_field_latlon_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];

  $element['#prefix'] = '<div class="container-inline">';
  $element['#suffix'] = '</div>';
  $element['lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#default_value' => isset($element['#value']['lat']) ? $element['#value']['lat'] : NULL,
    '#required' => $field['required'],
    '#size' => 15,
    '#maxlength' => 15,
  );
  $element['lon'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#default_value' => isset($element['#value']['lon']) ? $element['#value']['lon'] : NULL,
    '#required' => $field['required'],
    '#size' => 15,
    '#maxlength' => 15,
  );
  $element['wkt'] = array(
    '#type' => 'value',
    '#value' => isset($element['#value']['wkt']) ? $element['#value']['wkt'] : NULL,
  );
  return $element;
}

function geo_field_wkt_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $element['wkt'] = array(
    '#type' => 'textarea',
    '#title' => t($field['widget']['label']),
    '#default_value' => isset($element['#value']['wkt']) ? $element['#value']['wkt'] : NULL,
    '#required' => $field['required'],
    '#description' => $field['widget']['description'],
  );
  return $element;
}

function theme_geo_field_latlon($element) {
  return $element['#children'];
}

function theme_geo_field_wkt($element) {
  return $element['#children'];
}

function _geo_field_tablename($field) {
  return _content_tablename($field['field_name'], CONTENT_DB_STORAGE_PER_FIELD);
}

function _geo_field_init(&$field) {
  // We've already molested CCK's table, nothing to see here.
  if ($field['geo_enabled']) return;

  // Ignore fields that are still in infancy.
  if (!isset($field['field_name'])) return;

  $table  = _geo_field_tablename($field);

  // CCK hasn't created our table yet. Try again next time.
  if (!db_table_exists($table)) return;

  $column = $field['field_name'] .'_geo';

  // Reuse the original column definition, but set a different datatype.
  $spec = $field['columns']['geo'];
  $spec['type'] = $field['geo_type'];
  $spec['srid'] = $field['srid'] ? $field['srid'] : GEO_SRID_DEFAULT;;

  $ret = array();
  db_drop_field($ret, $table, $column);
  if ($field['geo_enabled'] = geo('add_field', $ret, $table, $column, $spec)) {
    // Re-save the field to ensure that geo_enabled gets set.
    module_load_include('inc', 'content', 'includes/content.crud');
    _content_field_write($field, 'update');
   content_clear_type_cache();
  }
}

/**
 * Implementation of hook_nodeapi().
 * Append microformats onto geo node feeds.
 */
function geo_field_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'rss item' && isset($node->geo_fields)) {
    $rss = array();
    foreach ($node->geo_fields as $field_name) {
      foreach ($node->$field_name as $item) {
        $rss[] = geo('rss_item', $item['wkb']);
      }
    }
    return $rss;
  }
}

/**
 * Implementation of hook_geo_views_api().
 */
function geo_field_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'geo_field') .'/includes/views',
  );
}
