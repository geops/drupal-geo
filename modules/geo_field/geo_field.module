<?php
// $Id$

/**
 * @file
 * Field for geospatial data using the Field API.
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function geo_field_field_info() {
  return array(
    'geo' => array(
      'label' => t('Geospatial data'),
      'description' => t('This field stores geospatial data in the database.'),
      'settings' => array('geo_type' => 'point', 'srid' => GEO_SRID_DEFAULT),
      'instance_settings' => array(),
      'default_widget' => 'wkt',
      'default_formatter' => 'wkt',
    ),
  );
}


/**
 * Implements hook_field_validate().
 */
function geo_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  foreach ($items as $delta => $item) {

    // Nothing to see here.
    if (!geo_field_field_is_empty($item, $field)) {

      // Convert to a geometry and validate it.
      $geo = geo_value($item['wkt'], 'geo', $instance['widget']['type']);

      if ($geo->geometryType() != $field['settings']['geo_type']) {
        form_set_error($field['field_name'], t(
          'Wrong geometry type. Got %result, was expecting %type.',
          array('%result' => $geo->geometryType(), '%type' => $field['settings']['geo_type'])
        ));
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function geo_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  foreach ($items as $delta => $item) {

    if (!geo_field_field_is_empty($item, $field)) {
      
      // Convert the WKT to binary data before the insert. This allows the
      // input to pass through the binary query substitutions.
      $items[$delta]['geo'] = db_query("SELECT GeomFromText(:wkt, :srid)", array(':wkt' => $item['wkt'], ':srid' => $field['settings']['srid']))->fetchField();
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function geo_field_field_is_empty($item, $field) {
  return empty($item['wkt']);
}

/**
 * Implements hook_field_update_field().
 */
//function geo_field_update_field($field, $prior_field, $has_data) {
//  geo('update_field', $field, $prior_field, $has_data);
//}


/***********************************************************************
 *  Field Type API: Formatter
 **********************************************************************/

/**
 * see geo.module for implementation of hook_field_formatter_info().
 */

/**
 * Implements hook_field_formatter_view().
 */
function geo_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'default':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = db_query("SELECT ST_AsText(:geo)", array(':geo' => $item['geo']))->fetchField();
      }
      break;
  }

  return $element;
}


/**************************************************************************
 * Field Type API: Widget
 **************************************************************************/

/**
 * Implementation of hook_field_widget_info().
 */
function geo_field_field_widget_info() {
  return array(
    'wkt' => array(
      'label' => t('Direct Text Entry'),
      'field types' => array('geo'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function geo_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

//  $value = geo_value($items[$delta]['geo'], 'wkt');
  $value = db_query("SELECT ST_AsText(:geo);", array(':geo' => $items[$delta]['geo']))->fetchField();
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {
    case 'wkt':
      $element['wkt'] = array(
        '#title' => t('Well Known Text'),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#required' => $element['#required'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_settings_form().
 */
function geo_field_field_settings_form($field, $instance, $has_data) {

  if (!$geo = geo_load(array('name' => $field['field_name']))) {
    $geo = geo_sql_load();
  }

  // For legacy reasons, we're storing the name of the type ('point') rather
  // than the GEO_TYPE_* values that are returned.
  foreach ($geo->geometryTypes() as $geo_type => $name) {
    $types[$name] = ucwords($name);
  }

  $form['geo_type'] = array(
    '#type' => 'select',
    '#title' => t('Data type'),
    '#options' => $types,
    '#default_value' => $field['settings']['geo_type'],
    '#description' => t('Choose the datatype that best describes the information you are storing. "Point" is suitable for addresses and other fixed points, but you may also choose "Linestring" for lines or tracks, and "Polygon" for shapes and areas.'),
    '#disabled' => $has_data,
  );

  $form['srid'] = array(
    '#type' => 'textfield',
    '#title' => t('SRID'),
    '#default_value' => $field['settings']['srid'],
    '#disabled' => $has_data,
  );

  return $form;
}
