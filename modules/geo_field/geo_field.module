<?php // $Id$

/**
 * @file
 * CCK Field integration for geospatial data.
 */
 
/**
 * Implementation of FAPI hook_elements().
 */
function geo_field_elements() {
  return array(
    'geo_field_wkt' => array(
      '#input' => TRUE,
      '#columns' => array('wkt'),
      '#delta' => 0,
      '#process' => array('geo_field_wkt_process'),
    ),
    'geo_field_latlon' => array(
      '#input' => TRUE,
      '#columns' => array('lat', 'lon', 'wkt'),
      '#delta' => 0,
      '#process' => array('geo_field_latlon_process'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function geo_field_theme() {
  return array(
    'geo_field_latlon' => array(
      'arguments' => array('element' => NULL),
    ),
    'geo_field_wkt' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function geo_field_info() {
  return array(
    'geo_point' => array(
      'label' => t('Point'),
      'callbacks' => array(
        'insert' => CONTENT_CALLBACK_CUSTOM,
        'update' => CONTENT_CALLBACK_CUSTOM,
      ),
    ),
    'geo_linestring' => array(
      'label' => t('Linestring'),
      'callbacks' => array(
        'insert' => CONTENT_CALLBACK_CUSTOM,
        'update' => CONTENT_CALLBACK_CUSTOM,
      ),
    ),
    'geo_polygon' => array(
      'label' => t('Polygon'),
      'callbacks' => array(
        'insert' => CONTENT_CALLBACK_CUSTOM,
        'update' => CONTENT_CALLBACK_CUSTOM,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function geo_field_settings($op, $field) {
  $field_name = $field['field_name'];
  
  switch ($op) {
    case 'form':
      $form = array();

      // Force 'multiple' in order to guarantee a separate storage table.
      $form['multiple'] = array('#type' => 'value', '#value' => 1);

      if (!isset($field['geo_enabled'])) $field['geo_enabled'] = false;
      $form['geo_enabled'] = array('#type' => 'value', '#value' => $field['geo_enabled']);

      // TODO pick the SRID for this column
      if (!isset($field['srid'])) $field['srid'] = GEO_SRID_DEFAULT;
      $form['srid'] = array('#type' => 'value', '#value' => $field['srid']);

      return $form;

    case 'save':
      return array('srid', 'geo_enabled');
    
    case 'database columns':
      // Use a well-known-text column for each field.
      // We'll add a geospatial field separately, which will mirror this value.
      $spec = array(
        'wkt' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
          'description' => t('Well-known-text format'),
        ),
        'geo' => array(
          'type' => 'blob', // This column will be dropped and replaced.
          'geo_type' => str_replace('geo_', '', $field['type']),
          'not null' => TRUE,
          'description' => t('Geometry field'),
        ),
      );

      // Add lat/lon values for point fields.
      if ($field['type'] == 'geo_point') {
        $spec['lat'] = array(
          'type' => 'float',
          'description' => t('Latitude'),
        );
        $spec['lon'] = array(
          'type' => 'float',
          'description' => t('Longitude'),
        );
      }

      return $spec;
    
    case 'tables':
      $info = geo_field_info();
      $label_prefix = t('@type: @field', array('@type' => $info[$field['type']]['label'], '@field' => $field['widget']['label'] .' ('. $field['field_name'] .')'));
      $view_table = geo_views_create_geometry_table($table_name, $field_name, $label_prefix, 'node', 'vid', 'vid', array('content_field' => $field), $join_extras = NULL);
      //return array('node_data_' . $field_name => $view_table);
      break;
    case 'filters':
      return array();
  }
}

/**
 * Implementation of hook_field().
 */
function geo_field($op, &$node, $field, &$items, $teaser, $page) {
  // Make sure the CCK table has our geo field.
  _geo_field_init($field);

  switch ($op) {

    case 'load':
      $ret = $node->$field['field_name'];
      unset($ret['geo']);
      $column = $field['field_name'] .'_geo';
      $res = db_query("SELECT ". geo('field_select', $column) .", delta
        FROM {". _geo_field_tablename($field) ."} WHERE vid = %d", $node->vid);
      while ($row = db_fetch_array($res)) { 
        foreach ($row as $k => $v) {
          if ($k != 'delta') $ret[$row['delta']][$k] = $v;
        }
      }
      return array( $field['field_name'] => $ret );

    case 'insert':
    case 'update':
      // We can't get Geom functions past query substitutions, so use our own.
      _geo_field_save($op, $node, $field, $items);

      // Unset the field data to prevent further action.
      unset($node->$field['field_name']);
      $items = array();
      return;

    case 'validate':
      foreach ($items as $k => $item) {
        if ($item['lat'] && $item['lon']) {
          $items[$k]['wkt'] = geo_wkt_from_point($item['lat'], $item['lon']);
        }

        geo('wkt_validate', $item['wkt'], $field['srid']);
      }

    case 'presave':
      foreach ($items as $k => $item) {
        if ($item['lat'] && $item['lon']) {
          $items[$k]['wkt'] = geo_wkt_from_point($item['lat'], $item['lon']);
        }
      }
      return;
  }
}

function _geo_field_save($op, $node, $field, $items) {
  $table = $table  = _geo_field_tablename($field);
  $schema = drupal_get_schema($table);

  db_query("DELETE FROM {". $table ."} WHERE vid = %d", $node->vid);
  foreach ($items as $delta => $item) {
    $columns = $values = $holders = array();
    $record = array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'delta' => $delta,
    );
    foreach ($schema['fields'] as $column => $info) {
      $key = str_replace($field['field_name'] .'_', '', $column);
      $columns[] = $column;

      if (substr($column, -4) == '_geo') {
        // No substitution for our geo column and omit the corresponding value.
        $srid = (int) $field['srid'] ? $field['srid'] : GEO_SRID_DEFAULT;
        $holders[] = "GeomFromText('". db_escape_string($item['wkt']) ."', $srid)";
      }
      else {
        $holders[] = db_type_placeholder($info['type']);
        $values[] = isset($record[$column]) ? $record[$column] : $item[$key];
      }
    }

    db_query("INSERT INTO {". $table ."} (". implode(', ', $columns) .') 
      VALUES ('. implode(', ', $holders) .')', $values);
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function geo_field_formatter_info() {
  // TODO some other formatters: asKML, asGML, asGeoRSS, etc
  // TODO Can we do math on the field? area, length, etc?
  return array(
    'default' => array(
      'label' => t('Well Known Text'),
      'field types' => array_keys(geo_field_info()),
    ),
  );
}

/**
 * Implementation fo hook_field_formatter().
 */
function geo_field_formatter($field, $item, $formatter, $node) {
  switch ($formatter) {
    default:
      return $item['wkt'];
  };
}

/**
 * Implementation of hook_widget_info().
 */
function geo_widget_info() {
  return array(
    'geo_field_wkt' => array(
      'label' => t('Direct Text Entry'),
      'field types' => array_keys(geo_field_info()),
    ),
    'geo_field_latlon' => array(
      'label' => t('Latitude / Longitude'),
      'field types' => array('geo_point'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function geo_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
}

function geo_field_latlon_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];

  $element['#prefix'] = '<div class="container-inline">';
  $element['#suffix'] = '</div>';
  $element['lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#default_value' => isset($element['#value']['lat']) ? $element['#value']['lat'] : NULL,
    '#required' => $field['required'],
    '#size' => 15,
    '#maxlength' => 15,
  );
  $element['lon'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#default_value' => isset($element['#value']['lon']) ? $element['#value']['lon'] : NULL,
    '#required' => $field['required'],
    '#size' => 15,
    '#maxlength' => 15,
  );
  $element['wkt'] = array(
    '#type' => 'value',
    '#value' => isset($element['#value']['wkt']) ? $element['#value']['wkt'] : NULL,
  );
  return $element;
}

function geo_field_wkt_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $element['wkt'] = array(
    '#type' => 'textfield',
    '#title' => t($field['widget']['label']),
    '#default_value' => isset($element['#value']['wkt']) ? $element['#value']['wkt'] : NULL,
    '#required' => $field['required'],
    '#description' => $field['widget']['description'],
  );
  return $element;
}

function theme_geo_field_latlon($element) {
  return $element['#children'];
}

function theme_geo_field_wkt($element) {
  return $element['#children'];
}

function geo_content_is_empty($item, $field) {
  return empty($item['wkt']);
}

function _geo_field_tablename($field) {
  return _content_tablename($field['field_name'], CONTENT_DB_STORAGE_PER_FIELD);
}

function _geo_field_init(&$field) {
  // We've already molested CCK's table, nothing to see here.
  if ($field['geo_enabled']) return;

  // Ignore fields that are still in infancy.
  if (!isset($field['field_name'])) return;

  $table  = _geo_field_tablename($field);

  // CCK hasn't created our table yet. Try again next time.
  if (!db_table_exists($table)) return;

  $column = $field['field_name'] .'_geo';

  // Reuse the original column definition, but set a different datatype.
  $spec = $field['columns']['geo'];
  $spec['type'] = $spec['geo_type'];
  unset($field['columns']['geo']);

  $ret = array();
  db_drop_field($ret, $table, $column);
  if ($field['geo_enabled'] = geo('add_field', $ret, $table, $column, $spec)) {
    // Re-save the field to ensure that geo_enabled gets set.
    module_load_include('inc', 'content', 'includes/content.crud');
    _content_field_write($field, 'update');
   content_clear_type_cache();
  }
}
