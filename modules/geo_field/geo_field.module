<?php // $Id$

/**
 * @file
 * CCK Field integration for geospatial data.
 */
 
 /*
 TODO API for getting fields out of the table with attached info
 TODO generalize most, if not all, SQL in this file
 TODO standardize wkt vs. geometry
 TODO move geo_views_field_query_handler over to the per db installations (and possibly implment php based handlers there too)
 TODO form element for getting WKT, with validators?
 BUG selecting the same field twice with different options, results in the second choice twice
 */

/**
 * Implementation of hook_field_info().
 */
function geo_field_info() {
  return array(
    'geo_point' => array(
      'label' => t('Point'),
      'callbacks' => array( // TODO almost certainly not using default tables!
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'geo_linestring' => array(
      'label' => t('Linestring'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'geo_polygon' => array(
      'label' => t('Polygon'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function geo_field_settings($op, $field) {
  $field_name = $field['field_name'];
  $table_name = _content_tablename($field_name, CONTENT_DB_STORAGE_PER_FIELD);
  
  switch ($op) {
    case 'form':
      $form = array();
      // TODO pick the SRID for this column
      $form['srid'] = array();
      return $form;

    case 'save':
      return array('srid');
    
    case 'database columns':
      _geo_field_create_table($field);
      return; 
    
    case 'tables':
      $info = geo_field_info();
      $label_prefix = t('@type: @field', array('@type' => $info[$field['type']]['label'], '@field' => $field['widget']['label'] .' ('. $field['field_name'] .')'));
      $view_table = geo_views_create_geometry_table($table_name, $field_name, $label_prefix, 'node', 'vid', 'vid', array('content_field' => $field), $join_extras = NULL);
      //return array('node_data_' . $field_name => $view_table);
      break;
    case 'filters':
      return array();
  }
}

/**
 * Implementation of hook_field().
 */
function geo_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {

    case 'load':
      $ret = array();
      $res = db_query("SELECT ". geo_db_field_select($field_name) ." FROM %s WHERE vid = %d", $table, $node->vid);
      while ($row = db_fetch_array($res)) $ret[] = $row;
      return array($field['field_name'] => $ret);

    case 'insert':
      $value = geo_db_field_from_wkt($node_field['wkt'], $field['srid']);
      db_query("INSERT INTO {%s} (%s, vid, nid, delta) VALUES (%s, %d, %d)", $value, $table, $field_name, 0, $node->vid, $node->nid);
      break;

    case 'update':
      $value = geo_db_field_from_wkt($node_field['wkt'], $field['srid']);
      db_query("UPDATE {%s} SET %s = %s WHERE nid = %d", $table, $field_name, $value, $node->nid);
      break;

    case 'delete':
      db_query("DELETE FROM {%s} WHERE nid = %d", $table, $node->nid);
      break;

    case 'validate':
      geo_db_field_validate($node_field['wkt'], $field['srid']);
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function geo_field_formatter_info() {
  // TODO some other formatters: asKML, asGML, asGeoRSS, etc
  // TODO Can we do math on the field? area, length, etc?
  return array(
    'default' => array(
      'label' => t('Well Known Text'),
      'field types' => array_keys(geo_field_info()),
    ),
  );
}

/**
 * Implementation fo hook_field_formatter().
 */
function geo_field_formatter($field, $item, $formatter, $node) {
  switch ($formatter) {
    default:
      return $item['wkt'];
  };
}

/**
 * Implementation of hook_widget_info().
 */
function geo_widget_info() {
  return array(
    'geo_wkt' => array(
      'label' => t('Direct Text Entry'),
      'field types' => array_keys(geo_field_info()),
    ),
    'geo_latlon' => array(
      'label' => t('Latitude / Longitude'),
      'field types' => array('geo_point'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function geo_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      return $form;

    case 'validate':
      break;

    case 'save':
      return NULL; // array('rows');

  }
}

/**
 * Implementation of hook_widget().
 */
function geo_widget($op, &$node, $field, &$items) {
  switch ($op) {
    case 'prepare form values':
      break;

    case 'form':
      $form = array();
      $fn = $field['field_name'];
      
      $form[$fn] = array(
        '#tree' => TRUE,
        '#type' => 'fieldset',
        '#title' => t($field['widget']['label']),
      );
      switch ($field['widget']['type']) {
        case 'latlon':
          $data = _geo_latlonfrompoint($items[0]['wkt']);
          $form[$fn][0]['latlon']['lat'] = array(
            '#type' => 'textfield',
            '#title' => t('Latitude'),
            '#default_value' => $data['lat'],
            '#required' => $field['required'],
            '#size' => 15,
            '#maxlength' => 15,
          );
          $form[$fn][0]['latlon']['lon'] = array(
            '#type' => 'textfield',
            '#title' => t('Longitude'),
            '#default_value' => $data['lon'],
            '#required' => $field['required'],
            '#size' => 15,
            '#maxlength' => 15,
          );
          break;

        case 'wkt':
        default:
          // for now, we just have one item
          $form[$fn][0]['wkt'] = array(
            '#type' => 'textfield',
            '#title' => t($field['widget']['label']),
            '#default_value' => $items[0]['wkt'],
            '#required' => $field['required'],
            '#description' => $field['widget']['description'],
          );
          break;
      }
      return $form;

    case 'process form values':
      foreach($items as $delta => $values) {
        if (isset($values['latlon']) && !empty($values['latlon']['lat'])) {
          $items[$delta]['wkt'] = 'POINT('. $items[0]['latlon']['lat'] .' '. $items[0]['latlon']['lon'] .')';
          unset($items[$delta]['latlon']);
        }
      }
      break;
  }
}

function _geo_field_create_table($field) {
  $ret = array();
  db_create_table($ret, $table, content_table_schema($field));
  geo_db_add_field($ret, $table, $field_name, $spec);
  return $table_name;
}

function _geo_field_drop_table($field) {
  $ret = array();
  db_drop_table($ret, $field['table']);
  return $ret;
}
