<?php
// $Id$

/**
 * @file
 * Administration tasks for the geo module, such as finding and adding new tables to views.
 *
 * @package geo
 */

/**
 * CCK Field integration for geospatial data.
 * In contrast with the geo_field module, this field module provides references
 * to imported geospatial data.
 */

/**
 * Implementation of FAPI hook_elements().
 */
function geo_data_elements() {
  return array(
    'geo_data_select' => array(
      '#input' => TRUE,
      '#columns' => array('value'),
      '#delta' => 0,
      '#process' => array('geo_data_select_process'),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function geo_data_field_info() {
  return array(
    'geo_data' => array(
      'label' => t('Geospatial data reference'),
      'callbacks' => array(),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function geo_data_field_settings($op, $field) {

  // TODO upgrade path for geo_data_table.
  switch ($op) {
    case 'form':
      $form = array();

      $form['geo_data'] = array(
        '#tree' => TRUE,
        '#theme' => 'geo_data_field_settings',
      );

      foreach (geo_list() as $geo) {
        if ($table = $geo->tableName()) {

          // For now, let's not use data from existing fields.
          if (substr($geo->name(), 0, 6) == 'field_') {
            continue;
          }

          $schema = drupal_get_schema($table);
          $columns = array('' => t('Select a column'));
          foreach ($schema['fields'] as $name => $info) {
            // Add anything that's not a geo field to the list of possible keys.
            if (!in_array($info['type'], array('blob', 'text', 'geometry'))) {
              $columns[$name] = isset($info['title']) ? $info['title'] : $name;
            }
          }

          $name = $geo->name();
          $form['geo_data'][$name] = array();
          $form['geo_data'][$name]['status'] = array(
            '#type' => 'checkbox',
            '#title' => $geo->title(),
            '#default_value' => $field['geo_data'][$name]['status'],
          );

          $form['geo_data'][$name]['label'] = array(
            '#type' => 'select',
            '#title' => t('Label column'),
            '#options' => $columns,
            '#default_value' => $field['geo_data'][$name]['label'],
          );
          $form['geo_data'][$name]['key1'] = array(
            '#type' => 'select',
            '#options' => $columns,
            '#default_value' => $field['geo_data'][$name]['key1'],
          );
          $form['geo_data'][$name]['key2'] = array(
            '#type' => 'select',
            '#options' => $columns,
            '#default_value' => $field['geo_data'][$name]['key2'],
          );
          $form['geo_data'][$name]['key3'] = array(
            '#type' => 'select',
            '#options' => $columns,
            '#default_value' => $field['geo_data'][$name]['key3'],
          );

          $form['geo_data'][$name]['options'] = array(
            '#type' => 'fieldset',
            '#title' => t('Settings for %title', array('%title' => $geo->title())),
            '#attributes' => array('class' => 'geo-data-' . $name),
          );
          $form['geo_data'][$name]['options']['required'] = array(
            '#type' => 'checkbox',
            '#title' => t('Required'),
            '#default_value' => $field['geo_data'][$name]['required'],
          );
          $form['geo_data'][$name]['options']['depth'] = array(
            '#type' => 'checkbox',
            '#title' => t('Require depth'),
            '#default_value' => $field['geo_data'][$name]['depth'],
          );
        }
      }
      return $form;

    case 'save':
      return array('geo_data_table', 'geo_data_key', 'geo_data_value', 'geo_type');

    case 'database columns':
      return array(
        'value' => array(
          'type' => 'varchar',
          'length' => 255,
          'description' => t('Key to geospatial table values'),
        ),
      );

    case 'views data':
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $key = $db_info['columns']['value']['column'];

      // Add a join from the geo table to this field's table.
      $data[$field['geo_data_table']]['table']['join'][$table_alias] = array(
        'left_field' => $key,
        'field' => $field['geo_data_key'],
      );

      // Add a join from the geo table to the node table by way of this field.
      $data[$field['geo_data_table']]['table']['join']['node'] = array(
        'left_table' => $table_alias,
        'left_field' => $key,
        'field' => $field['geo_data_key'],
      );

      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function geo_data_field($op, &$node, $field, &$items, $teaser, $page) {

  switch ($op) {

    case 'load':
      $geo = geo_load(array('table_name' => $field['geo_data_table']));

      // If we didn't find a valid dataset, unset this field's value.
      if (!$geo->gid()) {
        return array($field['field_name'] => array());
      }

      $select = array();

      // Add the key and value columns to the table query.
      $select[] = $key = db_escape_string(check_plain($field['geo_data_key']));
      if (is_array($field['geo_data_value'])) {
        foreach ($field['geo_data_value'] as $val) {
          $select[] = db_escape_string(check_plain($val));
          $label = current($field['geo_data_value']);
        }
      }
      if ($select = join(',', $select)) {
        $select = ', ' . $select;
      }

      foreach ($items as $delta => $item) {
        if (!$item) {
          continue;
        }

        // TODO Please convert this statement to the D7 database API syntax.
        $res = db_query("SELECT " . $geo->AsBinary($geo) . " AS geo $select
          FROM {" . $geo->tableName() . "} WHERE $key = '%s'", $item['value']);
        if ($row = db_fetch_array($res)) {
          $item = array_merge($row, $item);
          if ($label) {
            $item['label'] = $item[$label];
          }
          $item['geo'] = $item['wkb'] = db_decode_blob($item['geo']);
          $items[$delta] = $item;
        }
      }
      return array($field['field_name'] => $items);

    case 'validate':
      return;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function geo_data_content_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implementation of hook_widget_info().
 */
function geo_data_widget_info() {
  return array(
    'geo_data_select' => array(
      'label' => t('Select list'),
      'field types' => array_keys(geo_data_field_info()),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function geo_data_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $element['#title'],
  );
}

function geo_data_select_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];

  $element['value'] = array(
    '#type' => 'select',
    '#options' => geo_data_allowed_values($field),
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#default_value' => isset($element['#value']['value']) ? $element['#value']['value'] : NULL,
  );
  return $element;
}

function geo_data_allowed_values($field) {
  $options = array('' => t('Please select'));
  $table = $field['geo_data_table'];
  $select = array();
  $select[] = $key = db_escape_string(check_plain($field['geo_data_key']));

  if (!$table || !$key) {
    return $options;
  }

  if (is_array($field['geo_data_value'])) {
    foreach ($field['geo_data_value'] as $val) {
      $select[] = db_escape_string(check_plain($val));
    }
  }
  $orderby = count($select) > 1 ? $select[1] : $select[0];

  $sql = "SELECT " . join(',', $select) . " FROM {" . $table . "}";
  $sql .= " ORDER BY $orderby";
  // TODO Please convert this statement to the D7 database API syntax.
  $res = db_query(db_distinct_field($table, $key, $sql));
  while ($row = db_fetch_array($res)) {
    $key = array_shift($row);
    $options[$key] = !empty($row) ? join(', ', $row) : $key;
  }
  return $options;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function geo_data_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Default',
      'field types' => array('geo_data'),
    ),
    'key' => array(
      'label' => 'Field key',
      'field types' => array('geo_data'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function geo_data_theme() {
  module_load_include('theme.inc', 'geo_data', 'theme/geo_data');
  return geo_data_theme_theme();
}
