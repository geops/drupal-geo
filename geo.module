<?php

// files we need to include on every page laod
require_once dirname(__FILE__) . '/geo_cck.inc';

/**
 * Implementation of hook_init()
 */
function geo_init() {
  if (function_exists('drupal_set_content')) {
    geo_bootstrap(); // bootstrap the db for non-cached page views
  }
}
/**
 * Implementation of hook_menu().
 */
function geo_menu($may_cache) {
  $items = array();

  if ($may_cache) {

    $items[] = array(
      'path' => 'admin/settings/geo',
      'title' => t('Geo'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geo_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'discription' => t('Configure settings for the geo module'),
    );
    
    $items[] = array(
      'path' => 'test-geo',
      'title' => t('Testing geo'),
      'callback' => 'geo_test_page',
      'type' => MENU_NORMAL_ITEM,
      'access' => TRUE,
      'discription' => t('Configure settings for the geo module'),
      );
  } else {
    
  }

  return $items;
}

function geo_admin_settings() {
  $form = array();
  switch($GLOBALS['db_type']) {
    case 'pgsql':
      $form['geo_postgis'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use PostGIS'),
        '#default_value' => variable_get('geo_postgis', false),
        '#description' => t('If you have install the PostGIS package in your database, you have access to more robust storage and querying services. Only check if you have installed this packed.')
      );
      break;
    case 'mysql':
      break;
  }
  return system_settings_form($form);
}

/**
 * Bootstraps the geo modules db storage, etc.
 *
 * @param $reset
 *  Normally, bootstrap should only run once. If you want to run bootstrap a second time, set to true.
 * @return void
 * @author Mark Fredrickson
 **/
function geo_bootstrap($reset = FALSE) {
  static $ran;
  if ($ran) {
    return;
  }
  
  /* pseudo
  - find the db type and include the backend file
  - IDEA! use CCK for the storage engine for non-postgis, non-mysqlspatial (can support postgres and mysql on one code base!)
  */
  
  switch($GLOBALS['db_type']) {
    case 'pgsql':
      if (variable_get('geo_postgis', false)) {
        require_once drupal_get_path('module', 'geo') . '/db/postgis.inc';
      }
      break;
    case 'mysql':
      break;
  }
  
  $ran = true;
}

/*** For testing ****/

function geo_test_page() {
  $output = '<p>geo test page</p>';
  if (variable_get('geo_postgis', false)) {
    $output .= "<p>PostGIS installed</p>";
  }
  
  return $output;
}
