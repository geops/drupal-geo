<?php

// TODO find a better way to load these on demand. we don't need them on every page load
require_once dirname(__FILE__) . '/geo_cck.inc';
require_once dirname(__FILE__) . '/geo_views.inc';

/**
 * Implementation of hook_init()
 */
function geo_init() {
  if (function_exists('drupal_set_content')) {
    geo_bootstrap(); // bootstrap the db for non-cached page views
  }
}
/**
 * Implementation of hook_menu().
 */
function geo_menu($may_cache) {
  $items = array();

  if ($may_cache) {

    $items[] = array(
      'path' => 'admin/settings/geo',
      'title' => t('Geo'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('geo_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'discription' => t('Configure settings for the geo module'),
    );
    
    $items[] = array(
      'path'        => 'admin/build/geo',
      'title'       => t('Geo-Spatial Tables'),
      'description' => t('Manage geographic information'),
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('geo_admin', 'build_tables'),
      'access'      => t('administer geo-spatial tables'),
    );
    
    $items[] = array(
      'path' => 'test-geo',
      'title' => t('Testing geo'),
      'callback' => 'geo_test_page',
      'type' => MENU_NORMAL_ITEM,
      'access' => TRUE,
      'discription' => t('Configure settings for the geo module'),
      );
  } else {
    
  }

  return $items;
}

/**
 * Implementation of hook_perm()
 */
function geo_perm() {
  return array(t('administer geo-spatial tables'));
}

/**
 * Settings callback function
 */
function geo_admin_settings() {
  $form = array();
  return system_settings_form($form);
}

/**
 * Automatic geo_admin.inc includer. Standard stuff
 */
function geo_admin($func) {
  require_once dirname(__FILE__).'/geo_admin.inc';
  if (function_exists($func = '_geo_'.$func)) {
    $args = func_get_args();
    unset($args[0]);
    return call_user_func_array($func, $args);
  }
}

/**
 * Bootstraps the geo modules db storage, etc.
 *
 * @param $reset
 *  Normally, bootstrap should only run once. If you want to run bootstrap a second time, set to true.
 * @return void
 * @author Mark Fredrickson
 **/
function geo_bootstrap($reset = FALSE) {
  static $ran;
  if ($ran && !$reset) {
    return;
  }
  
  /* pseudo
  - find the db type and include the backend file
  - IDEA! use CCK for the storage engine for non-postgis, non-mysqlspatial (can support postgres and mysql on one code base!)
  */
  switch(geo_backend_type()) {
    case 'postgis':
      require_once drupal_get_path('module', 'geo') . '/db/postgis.inc';
      break;
    case 'cck':
      // include the common backend
      break;
    case 'mysql_spatial':
      // include the mysql spatial backend
      break;
  }
  $ran = true;
}

/**
 * Return the geo backend database type.
 *
 * @return string
 *  The name of the backend: postgis, cck, mysql_spatial
 **/
function geo_backend_type() {
  switch($GLOBALS['db_type']) {
    case 'pgsql':
      // use the postgis backend if installed
      if(db_result(db_query("SELECT 1 FROM pg_catalog.pg_proc  WHERE proname = 'postgis_version'"))) {
        return 'postgis';
      } else {
        return 'pgsql';
      }
      break;
  }
  
}

/*** Cross Database API Functions ***/

/**
 * Returns an entry in the in the geo_field table.
 *
 * @return array
 *  A row from the db as an array. See geo.install for the nature of this data.
 *
 **/
function geo_fields($module = NULL) {
  static $fields;

  if (!is_array($fields)) {
    $fields = array();
    $res = db_query("SELECT * FROM {geo_field} ORDER BY module");

    while ($row = db_fetch_array($res)) {
      //if (!$fields[$row['table_name']]) $fields[$row['table_name']] = array();
      $fields[$row['module']][$row['field_name']] = $row;
    }
  }
  
  // if a specific module is requested
  if ($module) {
    return $fields[$module];
  }
  
  return $fields;
}

/*** For testing ****/

function geo_test_page() {
  $output = '<p>geo test page</p>';
  if (variable_get('geo_postgis', false)) {
    $output .= "<p>PostGIS installed</p>";
  }
  
  return $output;
}
